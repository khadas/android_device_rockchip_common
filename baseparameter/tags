!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Automatic	saveBaseParameter/main.cpp	/^    Automatic=0,$/;"	e	enum:output_depth	file:
BACKUP_OFFSET	saveBaseParameter/main.cpp	14;"	d	file:
BASEPARAMETER_IMAGE_SIZE	saveBaseParameter/main.cpp	27;"	d	file:
BASE_OFFSET	saveBaseParameter/main.cpp	13;"	d	file:
BUFFER_LENGTH	saveBaseParameter/main.cpp	21;"	d	file:
COLOR_AUTO	saveBaseParameter/main.cpp	23;"	d	file:
DEFAULT_BRIGHTNESS	saveBaseParameter/main.cpp	16;"	d	file:
DEFAULT_CONTRAST	saveBaseParameter/main.cpp	17;"	d	file:
DEFAULT_HUE	saveBaseParameter/main.cpp	19;"	d	file:
DEFAULT_SATURATION	saveBaseParameter/main.cpp	18;"	d	file:
GetBaseparameterFile	saveBaseParameter/main.cpp	/^const char* GetBaseparameterFile(void)$/;"	f
HDCP1X_EN	saveBaseParameter/main.cpp	24;"	d	file:
HWC_DISPLAY_EXTERNAL	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_EXTERNAL    = 1,    \/\/ HDMI, DP, etc.$/;"	e	enum:__anon1	file:
HWC_DISPLAY_EXTERNAL_BIT	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_EXTERNAL_BIT    = 1 << HWC_DISPLAY_EXTERNAL,$/;"	e	enum:__anon2	file:
HWC_DISPLAY_PRIMARY	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_PRIMARY     = 0,$/;"	e	enum:__anon1	file:
HWC_DISPLAY_PRIMARY_BIT	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_PRIMARY_BIT     = 1 << HWC_DISPLAY_PRIMARY,$/;"	e	enum:__anon2	file:
HWC_DISPLAY_VIRTUAL	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_VIRTUAL     = 2,$/;"	e	enum:__anon1	file:
HWC_DISPLAY_VIRTUAL_BIT	saveBaseParameter/main.cpp	/^    HWC_DISPLAY_VIRTUAL_BIT     = 1 << HWC_DISPLAY_VIRTUAL,$/;"	e	enum:__anon2	file:
HWC_NUM_DISPLAY_TYPES	saveBaseParameter/main.cpp	/^    HWC_NUM_DISPLAY_TYPES          = 3,$/;"	e	enum:__anon1	file:
HWC_NUM_PHYSICAL_DISPLAY_TYPES	saveBaseParameter/main.cpp	/^    HWC_NUM_PHYSICAL_DISPLAY_TYPES = 2,$/;"	e	enum:__anon1	file:
LOCAL_MODULE	saveBaseParameter/Android.mk	/^LOCAL_MODULE:= saveBaseParameter$/;"	m
LOCAL_PATH	saveBaseParameter/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	saveBaseParameter/Android.mk	/^LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	saveBaseParameter/Android.mk	/^LOCAL_SRC_FILES:= \\$/;"	m
RESOLUTION_AUTO	saveBaseParameter/main.cpp	22;"	d	file:
RESOLUTION_WHITE_EN	saveBaseParameter/main.cpp	25;"	d	file:
TEST_BASE_PARMARTER	saveBaseParameter/main.cpp	15;"	d	file:
aux	saveBaseParameter/main.cpp	/^    struct disp_info aux;$/;"	m	struct:file_base_paramer	typeref:struct:file_base_paramer::disp_info	file:
bcsh	saveBaseParameter/main.cpp	/^    struct bcsh_info bcsh;$/;"	m	struct:disp_info	typeref:struct:disp_info::bcsh_info	file:
bcsh_info	saveBaseParameter/main.cpp	/^struct bcsh_info {$/;"	s	file:
bottomscale	saveBaseParameter/main.cpp	/^    unsigned short bottomscale;$/;"	m	struct:overscan	file:
brightness	saveBaseParameter/main.cpp	/^    unsigned short brightness;$/;"	m	struct:bcsh_info	file:
clock	saveBaseParameter/main.cpp	/^    int clock;		\/* in kHz *\/$/;"	m	struct:drm_display_mode	file:
contrast	saveBaseParameter/main.cpp	/^    unsigned short contrast;$/;"	m	struct:bcsh_info	file:
depth_24bit	saveBaseParameter/main.cpp	/^    depth_24bit=8,$/;"	e	enum:output_depth	file:
depth_30bit	saveBaseParameter/main.cpp	/^    depth_30bit=10,$/;"	e	enum:output_depth	file:
depthc	saveBaseParameter/main.cpp	/^    enum output_depth depthc; \/\/ 4 bytes$/;"	m	struct:screen_info	typeref:enum:screen_info::output_depth	file:
device	saveBaseParameter/main.cpp	/^    char device[128];$/;"	m	struct:hwc_inital_info	file:
device_template	saveBaseParameter/main.cpp	/^static char const *const device_template[] =$/;"	v	file:
disp_info	saveBaseParameter/main.cpp	/^struct disp_info{$/;"	s	file:
drm_display_mode	saveBaseParameter/main.cpp	/^struct drm_display_mode {$/;"	s	file:
feature	saveBaseParameter/main.cpp	/^    unsigned int feature;\/\/4 \/\/4 bytes$/;"	m	struct:screen_info	file:
file_base_paramer	saveBaseParameter/main.cpp	/^struct file_base_paramer$/;"	s	file:
findSuitableInfoSlot	saveBaseParameter/main.cpp	/^static int findSuitableInfoSlot(struct disp_info* info, int type)$/;"	f	file:
flags	saveBaseParameter/main.cpp	/^    unsigned int flags;$/;"	m	struct:drm_display_mode	file:
format	saveBaseParameter/main.cpp	/^    enum output_format  format; \/\/ 4 bytes$/;"	m	struct:screen_info	typeref:enum:screen_info::output_format	file:
fps	saveBaseParameter/main.cpp	/^    float fps;$/;"	m	struct:hwc_inital_info	file:
framebuffer_height	saveBaseParameter/main.cpp	/^    unsigned int framebuffer_height;$/;"	m	struct:hwc_inital_info	file:
framebuffer_width	saveBaseParameter/main.cpp	/^    unsigned int framebuffer_width;$/;"	m	struct:hwc_inital_info	file:
getTypeFromConnector	saveBaseParameter/main.cpp	/^int getTypeFromConnector() {$/;"	f
hdisplay	saveBaseParameter/main.cpp	/^    int hdisplay;$/;"	m	struct:drm_display_mode	file:
hsync_end	saveBaseParameter/main.cpp	/^    int hsync_end;$/;"	m	struct:drm_display_mode	file:
hsync_start	saveBaseParameter/main.cpp	/^    int hsync_start;$/;"	m	struct:drm_display_mode	file:
htotal	saveBaseParameter/main.cpp	/^    int htotal;$/;"	m	struct:drm_display_mode	file:
hue	saveBaseParameter/main.cpp	/^    unsigned short hue;$/;"	m	struct:bcsh_info	file:
hwc_info	saveBaseParameter/main.cpp	/^    struct hwc_inital_info hwc_info; \/\/140 bytes$/;"	m	struct:disp_info	typeref:struct:disp_info::hwc_inital_info	file:
hwc_inital_info	saveBaseParameter/main.cpp	/^struct hwc_inital_info{$/;"	s	file:
invalid_output	saveBaseParameter/main.cpp	/^    invalid_output=6,$/;"	e	enum:output_format	file:
lblue	saveBaseParameter/main.cpp	/^    uint16_t lblue[1024];$/;"	m	struct:lut_data	file:
leftscale	saveBaseParameter/main.cpp	/^    unsigned short leftscale;$/;"	m	struct:overscan	file:
lgreen	saveBaseParameter/main.cpp	/^    uint16_t lgreen[1024];$/;"	m	struct:lut_data	file:
lred	saveBaseParameter/main.cpp	/^    uint16_t lred[1024];$/;"	m	struct:lut_data	file:
lut_data	saveBaseParameter/main.cpp	/^struct lut_data{$/;"	s	file:
main	saveBaseParameter/main.cpp	/^    struct disp_info main;$/;"	m	struct:file_base_paramer	typeref:struct:file_base_paramer::disp_info	file:
main	saveBaseParameter/main.cpp	/^int main(int argc, char** argv){$/;"	f
maxvalue	saveBaseParameter/main.cpp	/^    unsigned int maxvalue;$/;"	m	struct:overscan	file:
mlutdata	saveBaseParameter/main.cpp	/^    struct lut_data mlutdata;\/*6k+4*\/$/;"	m	struct:disp_info	typeref:struct:disp_info::lut_data	file:
outputImage	saveBaseParameter/main.cpp	/^int outputImage(const char *file_path, struct file_base_paramer *base, struct file_base_paramer *back)$/;"	f
output_depth	saveBaseParameter/main.cpp	/^enum output_depth {$/;"	g	file:
output_format	saveBaseParameter/main.cpp	/^enum output_format {$/;"	g	file:
output_rgb	saveBaseParameter/main.cpp	/^    output_rgb=0,$/;"	e	enum:output_format	file:
output_ycbcr420	saveBaseParameter/main.cpp	/^    output_ycbcr420=3,$/;"	e	enum:output_format	file:
output_ycbcr422	saveBaseParameter/main.cpp	/^    output_ycbcr422=2,$/;"	e	enum:output_format	file:
output_ycbcr444	saveBaseParameter/main.cpp	/^    output_ycbcr444=1,$/;"	e	enum:output_format	file:
output_ycbcr_high_subsampling	saveBaseParameter/main.cpp	/^    output_ycbcr_high_subsampling=4,  \/\/ (YCbCr444 > YCbCr422 > YCbCr420 > RGB)$/;"	e	enum:output_format	file:
output_ycbcr_low_subsampling	saveBaseParameter/main.cpp	/^    output_ycbcr_low_subsampling=5	, \/\/ (RGB > YCbCr420 > YCbCr422 > YCbCr444)$/;"	e	enum:output_format	file:
overscan	saveBaseParameter/main.cpp	/^struct overscan {$/;"	s	file:
picture_aspect_ratio	saveBaseParameter/main.cpp	/^    int picture_aspect_ratio;$/;"	m	struct:drm_display_mode	file:
printParameter	saveBaseParameter/main.cpp	/^static void printParameter(struct file_base_paramer *base_paramer){$/;"	f	file:
reserve	saveBaseParameter/main.cpp	/^    unsigned int reserve[128]; \/\/459x4$/;"	m	struct:disp_info	file:
resolution	saveBaseParameter/main.cpp	/^    struct drm_display_mode resolution;\/\/ 52 bytes$/;"	m	struct:screen_info	typeref:struct:screen_info::drm_display_mode	file:
rightscale	saveBaseParameter/main.cpp	/^    unsigned short rightscale;$/;"	m	struct:overscan	file:
saturation	saveBaseParameter/main.cpp	/^    unsigned short saturation;$/;"	m	struct:bcsh_info	file:
saveBcshConfig	saveBaseParameter/main.cpp	/^static void saveBcshConfig(struct file_base_paramer *base_paramer, int dpy){$/;"	f	file:
saveHwcInitalInfo	saveBaseParameter/main.cpp	/^static void saveHwcInitalInfo(struct file_base_paramer *base_paramer, int dpy, char* fb_info, char* device){$/;"	f	file:
saveResolutionInfo	saveBaseParameter/main.cpp	/^static void saveResolutionInfo(struct file_base_paramer *base_paramer, int dpy, int type){$/;"	f	file:
scan	saveBaseParameter/main.cpp	/^    struct overscan scan;\/\/12 bytes$/;"	m	struct:disp_info	typeref:struct:disp_info::overscan	file:
screen_info	saveBaseParameter/main.cpp	/^struct screen_info {$/;"	s	file:
screen_list	saveBaseParameter/main.cpp	/^    struct screen_info screen_list[5];$/;"	m	struct:disp_info	typeref:struct:disp_info::screen_info	file:
size	saveBaseParameter/main.cpp	/^    uint16_t size;$/;"	m	struct:lut_data	file:
topscale	saveBaseParameter/main.cpp	/^    unsigned short topscale;$/;"	m	struct:overscan	file:
type	saveBaseParameter/main.cpp	/^    int type;$/;"	m	struct:screen_info	file:
usage	saveBaseParameter/main.cpp	/^static void usage(){$/;"	f	file:
vdisplay	saveBaseParameter/main.cpp	/^    int vdisplay;$/;"	m	struct:drm_display_mode	file:
vrefresh	saveBaseParameter/main.cpp	/^    int vrefresh;$/;"	m	struct:drm_display_mode	file:
vscan	saveBaseParameter/main.cpp	/^    int vscan;$/;"	m	struct:drm_display_mode	file:
vsync_end	saveBaseParameter/main.cpp	/^    int vsync_end;$/;"	m	struct:drm_display_mode	file:
vsync_start	saveBaseParameter/main.cpp	/^    int vsync_start;$/;"	m	struct:drm_display_mode	file:
vtotal	saveBaseParameter/main.cpp	/^    int vtotal;$/;"	m	struct:drm_display_mode	file:
